name: Build Debian Package

on:
  workflow_dispatch:
  push:
    paths:
      - 'termchat.py'
      - 'requirements.txt'
      - '.github/workflows/build-deb.yml'
      - 'icons/*'

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-setuptools python3-wheel fakeroot dpkg-dev

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt pyinstaller

      - name: Generate hidden-import args
        id: gen_hidden_imports
        run: |
          HIDDEN_IMPORTS=""
          while IFS= read -r module; do
            MOD=$(echo "$module" | cut -d'=' -f1 | cut -d'<' -f1 | cut -d'>' -f1 | sed 's/\[.*\]//g' | xargs)
            if [ -n "$MOD" ]; then
              HIDDEN_IMPORTS="$HIDDEN_IMPORTS --hidden-import $MOD"
            fi
          done < requirements.txt
          echo "HIDDEN_IMPORTS=$HIDDEN_IMPORTS" >> $GITHUB_ENV

      - name: Find .png icon file
        id: find_icon
        run: |
          ICON_PATH=$(find icons -name '*.png' | head -n 1 || true)
          if [ -z "$ICON_PATH" ]; then
            echo "No .png icon found in icons/. An icon will not be set."
          fi
          echo "icon_path=$ICON_PATH" >> $GITHUB_OUTPUT

      - name: Build binary with PyInstaller
        run: |
          if [ -n "${{ steps.find_icon.outputs.icon_path }}" ]; then
            pyinstaller --onefile $HIDDEN_IMPORTS --name termchat --icon "${{ steps.find_icon.outputs.icon_path }}" termchat.py
          else
            pyinstaller --onefile $HIDDEN_IMPORTS --name termchat termchat.py
          fi

      - name: Prepare debian packaging structure
        run: |
          mkdir -p debbuild/termchat/usr/bin
          mkdir -p debbuild/termchat/usr/share/applications
          mkdir -p debbuild/termchat/usr/share/icons/hicolor/256x256/apps

          # Copy binary
          cp dist/termchat debbuild/termchat/usr/bin/termchat
          chmod +x debbuild/termchat/usr/bin/termchat

          # Optional: Copy icon if exists
          if [ -n "${{ steps.find_icon.outputs.icon_path }}" ]; then
            cp "${{ steps.find_icon.outputs.icon_path }}" debbuild/termchat/usr/share/icons/hicolor/256x256/apps/termchat.png
          fi

          # Create desktop entry
          cat <<EOF > debbuild/termchat/usr/share/applications/termchat.desktop
          [Desktop Entry]
          Name=Termchat
          Exec=termchat
          Icon=termchat
          Type=Application
          Categories=Network;Chat;
          EOF

          # Create DEBIAN control files
          mkdir -p debbuild/termchat/DEBIAN
          cat <<EOF > debbuild/termchat/DEBIAN/control
          Package: termchat
          Version: 1.0.0
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends:
          Maintainer: Unknown <unknown@example.com>
          Description: Terminal-based chat application
          EOF

      - name: Build .deb package
        run: |
          dpkg-deb --build debbuild/termchat

      - name: Upload .deb as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: Termchat
          path: debbuild/Termchat.deb
