name: Build macOS Binary x86_64

on:
  workflow_dispatch:
  push:
    paths:
      - 'termchat.py'
      - 'requirements.txt'
      - '.github/workflows/build-macos-binary-x86-64.yml'
      - 'icons/*'

jobs:
  build-macos-x86_64-app:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rosetta 2
        run: |
          sudo softwareupdate --install-rosetta --agree-to-license

      - name: Install Homebrew for x86_64 if missing
        shell: bash
        run: |
          if [ ! -d "/usr/local/Homebrew" ]; then
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          eval "$(/usr/local/bin/brew shellenv)"

      - name: Install Python 3.10 via x86_64 Homebrew
        run: |
          arch -x86_64 /usr/local/bin/brew install python@3.10

      - name: Find .icns icon file
        id: find_icon
        shell: bash
        run: |
          ICON_PATH=$(find icons -type f -name '*.icns' | head -n 1 || true)
          echo "icon_path=$ICON_PATH" >> "$GITHUB_OUTPUT"

      - name: Generate hidden-import args
        id: gen_hidden_imports
        shell: bash
        run: |
          HIDDEN_IMPORTS=""
          while IFS= read -r module; do
            MOD=$(echo "$module" | cut -d'=' -f1 | cut -d'<' -f1 | cut -d'>' -f1 | sed 's/\[.*\]//g' | xargs)
            if [ -n "$MOD" ]; then
              HIDDEN_IMPORTS="$HIDDEN_IMPORTS --hidden-import $MOD"
            fi
          done < requirements.txt
          echo "HIDDEN_IMPORTS=$HIDDEN_IMPORTS" >> "$GITHUB_ENV"

      - name: Install PyInstaller and project requirements
        run: |
          arch -x86_64 /usr/local/bin/python3.10 -m pip install --upgrade pip pyinstaller
          arch -x86_64 /usr/local/bin/python3.10 -m pip install -r requirements.txt

      - name: Build x86_64 .app with PyInstaller
        shell: bash
        run: |
          rm -rf dist_x86_64 build_x86_64
          ICON_PATH="${{ steps.find_icon.outputs.icon_path }}"
          if [ -n "$ICON_PATH" ]; then
            arch -x86_64 /usr/local/bin/pyinstaller --windowed ${{ env.HIDDEN_IMPORTS }} --distpath dist_x86_64 --workpath build_x86_64 --name Termchat --icon "$ICON_PATH" termchat.py
          else
            arch -x86_64 /usr/local/bin/pyinstaller --windowed ${{ env.HIDDEN_IMPORTS }} --distpath dist_x86_64 --workpath build_x86_64 --name Termchat termchat.py
          fi
      - name: Zip Termchat folder 
        run: |
          zip -r Termchat-MacOS-x86_64.zip Termchat.app

      - name: Upload zipped Termchat.app as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: Termchat-MacOS-x86_64
          path: dist_arm64/Termchat-MacOS-x86_64.zip
